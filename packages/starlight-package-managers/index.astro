---
import { Tabs, TabItem } from '@astrojs/starlight/components'
import { Code } from 'astro/components'

import { type CommandType, getCommand, type CommandOptions, getSupportedPkgManagers } from './pkg'

interface Props extends CommandOptions {
  pkg?: string | undefined
  type?: CommandType
}

const { pkg, type = 'add', ...options } = Astro.props

// TODO(HiDeoo) margin block
---

<starlight-package-managers>
  <Tabs>
    {
      getSupportedPkgManagers(type).map((pkgManager) => (
        <TabItem label={pkgManager}>
          <Code code={getCommand(pkgManager, type, pkg, options)} lang="sh" theme="css-variables" />
        </TabItem>
      ))
    }
  </Tabs>
</starlight-package-managers>

<script>
  customElements.define(
    'starlight-package-managers',
    class StarlightPackageManagers extends HTMLElement {
      #observer: MutationObserver
      #observerConfig: MutationObserverInit = { attributes: true, attributeFilter: ['aria-selected'] }

      #tabs: NodeListOf<HTMLAnchorElement>

      constructor() {
        super()

        this.#observer = new MutationObserver(this.#handleTabChange)
        this.#tabs = this.querySelectorAll<HTMLAnchorElement>('starlight-tabs [role="tablist"] [role="tab"]')

        this.observeTabs()
      }

      observeTabs = () => {
        for (const tab of this.#tabs) {
          this.#observer.observe(tab, this.#observerConfig)
        }
      }

      disconnectTabs = () => {
        this.#observer.disconnect()
      }

      #handleTabChange = (mutations: MutationRecord[]) => {
        const pkgTabs = [...document.querySelectorAll<this>('starlight-package-managers')]

        for (const pkgTab of pkgTabs) {
          pkgTab.disconnectTabs()
        }

        let newFocusedTab: HTMLAnchorElement | null = null

        for (const mutation of mutations) {
          if (mutation.attributeName !== 'aria-selected' || !(mutation.target instanceof HTMLAnchorElement)) {
            continue
          }

          if (mutation.target.getAttribute('aria-selected') !== 'true') {
            continue
          }

          newFocusedTab = mutation.target

          const newPkgManager = newFocusedTab.textContent?.trim() ?? ''
          const otherTabs = pkgTabs.filter((tabs) => tabs !== this)

          for (const otherTab of otherTabs) {
            const starlightTabs = otherTab.querySelector('starlight-tabs')

            if (!this.#isStarlightTabs(starlightTabs)) {
              continue
            }

            const tabs = [...starlightTabs.querySelectorAll<HTMLAnchorElement>('[role="tablist"] [role="tab"]')]
            const newTabIndex = tabs.findIndex((tab) => tab.textContent?.trim() === newPkgManager)

            starlightTabs.switchTab(tabs[newTabIndex], newTabIndex)
          }
        }

        requestAnimationFrame(() => {
          for (const pkgTab of pkgTabs) {
            pkgTab.observeTabs()
          }

          newFocusedTab?.focus()
        })
      }

      #isStarlightTabs(element: Element | null): element is StarlightTabs {
        return element !== null && 'switchTab' in element
      }
    },
  )

  type StarlightTabs = Element & { switchTab: (tab: HTMLAnchorElement | null | undefined, index: number) => void }
</script>
