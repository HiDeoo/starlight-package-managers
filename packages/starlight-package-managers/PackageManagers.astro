---
import { Code, Tabs, TabItem } from '@astrojs/starlight/components'
import type { ComponentProps } from 'astro/types'

import {
  type CommandOptions,
  type CommandType,
  getCommand,
  getSupportedPkgManagers,
  type PackageManager,
  getIcon,
} from './pkg'

export type PackageManagersProps = Props

interface Props extends CommandOptions {
  frame?: 'none' | 'terminal'
  icons?: boolean
  pkg?: string | undefined
  pkgManagers?: PackageManager[]
  title?: string | undefined
  type?: CommandType
}

const { frame = 'terminal', icons = true, pkg, pkgManagers, title = undefined, type = 'add', ...options } = Astro.props
const singlePkgManager = pkgManagers?.length === 1 ? pkgManagers[0] : undefined
const ecFrame = frame === 'terminal' ? 'terminal' : 'code'

function getTabItemProps(pkgManager: PackageManager) {
  const props: ComponentProps<typeof TabItem> = { label: pkgManager }
  const icon = getIcon(pkgManager) as ComponentProps<typeof TabItem>['icon']
  if (icons && icon) props.icon = icon
  return props
}
---

{
  singlePkgManager ? (
    <Code code={getCommand(singlePkgManager, type, pkg, options)} lang="sh" {title} frame={ecFrame} />
  ) : (
    <starlight-package-managers>
      <Tabs>
        {getSupportedPkgManagers(type, pkgManagers).map((pkgManager) => (
          <TabItem {...getTabItemProps(pkgManager)}>
            <Code code={getCommand(pkgManager, type, pkg, options)} lang="sh" {title} frame={ecFrame} />
          </TabItem>
        ))}
      </Tabs>
    </starlight-package-managers>
  )
}

<style>
  starlight-package-managers {
    display: block;
  }
</style>

<script>
  customElements.define(
    'starlight-package-managers',
    class StarlightPackageManagers extends HTMLElement {
      #observer: MutationObserver
      #observerConfig: MutationObserverInit = { attributes: true, attributeFilter: ['aria-selected'] }

      #tabs: NodeListOf<HTMLAnchorElement>

      constructor() {
        super()

        this.#observer = new MutationObserver(this.#handleTabChange)
        this.#tabs = this.querySelectorAll<HTMLAnchorElement>('starlight-tabs [role="tablist"] [role="tab"]')

        this.observeTabs()
      }

      observeTabs = () => {
        for (const tab of this.#tabs) {
          this.#observer.observe(tab, this.#observerConfig)
        }
      }

      disconnectTabs = () => {
        this.#observer.disconnect()
      }

      #handleTabChange = (mutations: MutationRecord[]) => {
        const pkgTabs = [...document.querySelectorAll<this>('starlight-package-managers')]

        for (const pkgTab of pkgTabs) {
          pkgTab.disconnectTabs()
        }

        let newFocusedTab: HTMLAnchorElement | null = null

        for (const mutation of mutations) {
          if (mutation.attributeName !== 'aria-selected' || !(mutation.target instanceof HTMLAnchorElement)) {
            continue
          }

          if (mutation.target.getAttribute('aria-selected') !== 'true') {
            continue
          }

          newFocusedTab = mutation.target

          const newPkgManager = newFocusedTab.textContent?.trim() ?? ''
          const otherTabs = pkgTabs.filter((tabs) => tabs !== this)

          for (const otherTab of otherTabs) {
            const starlightTabs = otherTab.querySelector('starlight-tabs')

            if (!this.#isStarlightTabs(starlightTabs)) {
              continue
            }

            // We cannot use the `switchTab()` method provided by Starlight as it focuses the new tab which will cause
            // the page to scroll for every set of tabs.
            this.#switchTabs(starlightTabs, newPkgManager)
          }
        }

        requestAnimationFrame(() => {
          for (const pkgTab of pkgTabs) {
            pkgTab.observeTabs()
          }

          newFocusedTab?.focus()
        })
      }

      // https://github.com/withastro/starlight/blob/290af4f0b5f65619fa4c65609940c3a911a7e698/packages/starlight/user-components/Tabs.astro#L116-L135
      #switchTabs(starlightTabs: StarlightTabs, newPkgManager: string) {
        const tabs = starlightTabs.tabs
        const newTabIndex = tabs.findIndex((tab) => tab.textContent?.trim() === newPkgManager)
        const newTab = tabs[newTabIndex]
        const newPanel = starlightTabs.panels[newTabIndex]

        if (!newTab || !newPanel) {
          return
        }

        for (const tab of starlightTabs.tabs) {
          tab.removeAttribute('aria-selected')
          tab.setAttribute('tabindex', '-1')
        }

        for (const panel of starlightTabs.panels) {
          panel.hidden = true
        }

        newPanel.hidden = false
        // Restore active tab to the default tab order.
        newTab.removeAttribute('tabindex')
        newTab.setAttribute('aria-selected', 'true')
      }

      #isStarlightTabs(element: Element | null): element is StarlightTabs {
        return element instanceof Element && 'tabs' in element && 'panels' in element
      }
    },
  )

  type StarlightTabs = Element & {
    panels: HTMLElement[]
    tabs: HTMLAnchorElement[]
  }
</script>
