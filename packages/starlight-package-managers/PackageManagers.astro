---
import { Code as ECCode, Tabs, TabItem } from '@astrojs/starlight/components'
import type { ComponentProps } from 'astro/types'
import { Code as AstroCode } from 'astro:components'
import config from 'virtual:starlight/user-config'

import {
  type CommandOptions,
  type CommandType,
  getCommand,
  getSupportedPkgManagers,
  type PackageManager,
  getIcon,
} from './pkg'

export type PackageManagersProps = Props

interface Props extends CommandOptions {
  frame?: 'none' | 'terminal'
  icons?: boolean
  pkg?: string | undefined
  pkgManagers?: PackageManager[]
  title?: string | undefined
  type?: CommandType
}

const { frame = 'terminal', icons = true, pkg, pkgManagers, title = undefined, type = 'add', ...options } = Astro.props
const singlePkgManager = pkgManagers?.length === 1 ? pkgManagers[0] : undefined
const isUsingEC = config.expressiveCode !== false
const ecFrame = isUsingEC ? (frame === 'terminal' ? 'terminal' : 'code') : undefined
const Code = isUsingEC ? ECCode : AstroCode

function getTabItemProps(pkgManager: PackageManager) {
  const props: ComponentProps<typeof TabItem> = { label: pkgManager }
  const icon = getIcon(pkgManager) as ComponentProps<typeof TabItem>['icon']
  if (icons && icon) props.icon = icon
  return props
}
---

{
  singlePkgManager ? (
    <Code code={getCommand(singlePkgManager, type, pkg, options)} lang="sh" {title} frame={ecFrame} />
  ) : (
    <Tabs syncKey="starlight-package-managers-pkg">
      {getSupportedPkgManagers(type, pkgManagers).map((pkgManager) => (
        <TabItem {...getTabItemProps(pkgManager)}>
          <Code code={getCommand(pkgManager, type, pkg, options)} lang="sh" {title} frame={ecFrame} />
        </TabItem>
      ))}
    </Tabs>
  )
}
